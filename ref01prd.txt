# ziprevelio PRD

Core Requirements ðŸŽ¯

1. CLI tool to analyze a single ZIP file using parallel processing
2. Uses tokio for async I/O and rayon for parallel decompression
3. Outputs analysis to a text file
4. Shows progress bar during analysis
5. Handles ZIP files efficiently:
6. Provides detailed file statistics and compression info
7. Graceful error handling
8. Simple CLI: `cargo run -- input.zip output.txt`

Example Report Format:
```
=== ZIP Analysis Report ===

Total size: 1.31 MiB
Files analyzed: 6
Analysis time: 0.29s

Overall compression ratio: 23.7%
Total compressed: 1.00 MiB
Total uncompressed: 1.31 MiB

File types:
  ZIP: 6

Compression methods:
  Stored: 3
  Deflated: 3

Files (sorted alphabetically):
/path/to/file1.zip
/path/to/file2.zip
/path/to/file3.zip
/path/to/file4.zip
/path/to/file5.zip
/path/to/file6.zip
```

e.g.
1.
cargo run -- /home/amuldotexe/Downloads/node-main.zip /home/amuldotexe/Downloads/node-main-20241105v2.txt

Constraints:
- ASCII filenames only (for compatibility)
- Store/Deflate compression only (most common methods)

Implementation Guidelines ðŸ”§

1. Performance Parameters
   - Entry chunk size: 1-4MB optimal
   - Target memory usage: 2-5MB per thread
   - Directory read time: < 2ms
   - Entry process time: 5-20ms per MB

2. Error Handling Strategy
   - Validate ZIP signatures (0x04034b50, 0x02014b50, 0x06054b50)
   - Verify CRC32 checksums
   - Skip corrupted entries, continue processing
   - Report errors in output file

3. Thread Safety Requirements
   - Use atomic counters for progress
   - Immutable central directory sharing
   - Thread-local entry buffers
   - Lock-free stats collection

4. Processing Order
   ```
   1. Locate End Directory
   2. Parse Central Directory
   3. Parallel Entry Processing
   4. Generate Report
   ```

5. Buffer Management
   - Use thread-local buffers for entries
   - Optimize for ZIP entry sizes
   - Minimize memory allocations
   - Handle large files efficiently
