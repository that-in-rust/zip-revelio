# ZIP-REVELIO PRD (v0.1-alpha)
Development Paused: 2024-01-17

## What is ZIP-REVELIO? 🎯

A fast, efficient command-line tool that helps you:
- Analyze large ZIP files (up to 4GB)
- See what's inside without extracting
- Check compression ratios and file stats
- Spot potential issues or corruptions

## How Does It Work? 🛠️

Simple! Just do cargo run and point it to your ZIP file & intended output file:
```bash
cargo run -- input.zip output.txt

// e.g. 
cargo run -- /home/amuldotexe/Downloads/node-main.zip /home/amuldotexe/Downloads/node-main-20241117v2.txt
```

And you'll get this Example Output:
```
=== ZIP Analysis Report ===
Total size: 1.31 MiB
Files analyzed: 6
Analysis time: 0.29s
Compression ratio: 23.7%

Files found:
  /path/to/file1.zip
  /path/to/file2.zip
  ...
```

## How Fast Is It? 📊

Here's what we've achieved so far:

- Speed: It processes ZIP files at 23.5 MB per second! 
  That's faster than our 20 MB/s goal 🚀

- Memory: Uses about 488 MB of RAM when analyzing
  Well under our 512 MB limit 💾

- CPU Power: Takes full advantage of all 8 CPU cores
  Your computer's power won't go to waste! 💪

- Testing: We've tested about:
  • 75% of individual components
  • 60% of end-to-end workflows
  More tests coming soon! 🧪

## Current Progress 📊

⏸️ What's Next:
```
Error Handling:  30% [Malformed ZIPs, Resource limits]
Performance:     20% [Memory tracking, I/O metrics]
Testing:         40% [More coverage, Benchmarks]
Documentation:   50% [API docs, User guide]
```

## Technical Details 🔧

1. Performance Requirements
   ```
   - Process >20 MB/s on standard hardware
   - Use <512MB RAM for 4GB files
   - Start up in <100ms
   - Scale across 8 CPU cores
   ```

2. Implementation Stack
   ```rust
   tokio:     Async I/O
   rayon:     Parallel processing
   indicatif: Progress display
   thiserror: Error handling
   ```

3. Test Framework
   ```
   Unit Tests:      >80% coverage
   Integration:     >70% coverage
   Test Data:       1MB, 10MB, corrupted
   Error Scenarios: All common cases
   ```

## Constraints & Limitations 🚧

Currently:
- ASCII filenames only
- Store/Deflate compression
- Max 4GB ZIP files
- Linux environment
- Rust 2021 edition

## Development Guidelines 📝

1. Error Handling
   - Validate ZIP signatures
   - Check CRC32 checksums
   - Handle resource limits
   - Prevent data corruption

2. Performance
   - Use thread-local buffers
   - Optimize chunk sizes (64KB)
   - Minimize allocations
   - Monitor resource usage

Remember:
- Keep it simple
- Focus on performance
- Handle errors gracefully
- Test thoroughly
