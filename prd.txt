# Parallel ZIP File Analyzer - PRD

## Section 1: Core Requirements 🎯

1. CLI tool to analyze a single ZIP file using parallel processing
2. Uses tokio for async I/O and rayon for parallel decompression
3. Outputs analysis to a text file
4. Shows progress bar during analysis
5. Handles large ZIP files (>10GB) efficiently via streaming
6. Provides detailed file statistics and compression info
7. Maintains memory efficiency through chunked processing
8. Graceful error handling
9. Simple CLI: `cargo run -- input.zip output.txt`

## Section 2: Architecture 🏗️

"Think of this like a factory assembly line for ZIP files - each part has a specific job, and they all work together like a well-oiled machine!"

💡 High-Level Flow:
```
Input ZIP         Processing Pipeline              Output
   📦     →    🏭 [Factory Floor]    →         📊 Report
(ZIP File)     (Parallel Processing)        (Analysis Text)
```

🏗️ Module Design Visualization:
```
                    main.rs
                      │
           ┌──────────┴──────────┐
           ▼          ▼          ▼
       analyzer/   models/     writer/
    (Brain 🧠)   (Data 📋)   (Output ✍️)
```

🔄 Data Flow Through Modules:
```
ZIP File → [analyzer/zip.rs] → Chunks → [analyzer/chunks.rs] → Results → [writer/report.rs] → Output
   📦          🔍               🧩             ⚡                📊            ✍️              📄
              Read           Split          Process          Collect       Format          Write
```

💾 Memory Management Flow:
```
                    Memory Pool
┌─────────────────────────────────────────┐
│                                         │
│    ┌──────┐     ┌──────┐     ┌──────┐   │
│    │Buffer│     │Buffer│     │Buffer│   │
│    └──┬───┘     └──┬───┘     └──┬───┘   │
│       │            │            │       │
└───────┼────────────┼────────────┼───────┘
        │            │            │
    Thread 1     Thread 2     Thread N
     🧵           🧵           🧵
```

🔄 Parallel Processing Visualization:
```
Input Stream
     │
     ▼
┌─────────┐
│ Chunks  │
└─────────┘
     │
     ▼
┌─────────────────────────────┐
│     Thread Pool (rayon)     │
│  🧵   🧵   🧵   🧵   🧵     │
└─────────────────────────────┘
     │
     ▼
┌─────────┐
│ Results │
└─────────┘
```

📊 Progress Tracking:
```
[====================] 100%
     ↑            ↑
  Progress      ETA
   Update     Estimate
```

🔍 Error Recovery Strategy:
```
Error Detected
      │
      ▼
  Recoverable?
      │
  ┌───┴────┐
  │        │
 Yes      No
  │        │
Retry    Skip
  │        │
  └───┬────┘
      │
 Continue
```

Key Design Principles:

1. 🎯 Single Responsibility:
   ```
   analyzer/ → Reading & Processing
   models/  → Data Structures
   writer/  → Output Generation
   ```

2. 🔄 Data Flow Control:
   ```
   ┌────────────┐    ┌────────────┐    ┌────────────┐
   │   Input    │ →  │  Process   │ →  │   Output   │
   │  Channel   │    │  Channel   │    │  Channel   │
   └────────────┘    └────────────┘    └────────────┘
   ```

3. 🧮 Memory Management:
   ```
   Available RAM
   ┌────────────────────────────┐
   │ App Limit (80%)            │
   │ ┌────────────────────┐     │
   │ │ Buffer Pool        │     │
   │ │ ┌──────┐ ┌──────┐  │     │
   │ │ │Chunk │ │Chunk │  │     │
   │ │ └──────┘ └──────┘  │     │
   │ └────────────────────┘     │
   └────────────────────────────┘
   ```

## Section 3: Library Architecture 📚

"Think of libraries like specialized tools in a workshop - each one is perfect for a specific job!"

💡 Core Libraries Overview:
```
tokio (Async Runtime)     rayon (Parallel Processing)     zip-rs (ZIP Handling)
       🚀                           ⚡                            📦
    I/O Engine                Thread Pool                  ZIP Parser
```

🔧 Library Interactions:
```
                        Application
                            │
              ┌─────────────┴──────────────┐
              ▼                            ▼
          tokio Runtime                rayon Pool
     (Async I/O Operations)      (CPU-bound Processing)
              │                            │
              │        zip-rs              │
              │           │               │
              │           ▼               │
              │      Parse Headers        │
              │           │               │
              │           ▼               │
         Read Chunks ◄────┘               │
              │                           │
              └────────────┐              │
                          ▼              ▼
                    Process Chunks    Decompress
                          │              │
                          └──────────────┘
                                │
                                ▼
                          Write Results
```

📊 Library Responsibilities:

```
tokio
┌────────────────────┐
│ • Async File I/O   │
│ • Event Loop       │
│ • Task Scheduling  │
│ • Channel Comms    │
└────────────────────┘

rayon
┌────────────────────┐
│ • Thread Pool      │
│ • Work Stealing    │
│ • Parallel Iters   │
│ • Data Parallelism │
└────────────────────┘

zip-rs
┌────────────────────┐
│ • ZIP Parsing      │
│ • Decompression    │
│ • CRC Validation   │
│ • Format Handling  │
└────────────────────┘
```

🔄 Data Flow Through Libraries:
```
File System → tokio → zip-rs → rayon → tokio → File System
    📁         🚀      📦       ⚡       🚀        📁
    Read     Async    Parse  Process   Write    Output
```

💡 Why These Libraries?

```
tokio                      rayon                     zip-rs
  │                          │                         │
  ▼                          ▼                         ▼
Async I/O               CPU Parallelism           ZIP Expertise
  │                          │                         │
  │                          │                         │
  └─────────────┬────────────┴────────────┬───────────┘
                ▼                          ▼
         Performance 🚀              Reliability ✅
```

🔄 Integration Pattern:
```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│    tokio    │ →   │   zip-rs    │ →   │    rayon    │
│ (I/O Layer) │     │(Parse Layer)│     │(CPU Layer)  │
└─────────────┘     └─────────────┘     └─────────────┘
      ▲                                        │
      └────────────────────────────────────────┘
               Results Flow Back
```

[Continue with existing content...]


