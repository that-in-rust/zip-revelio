ZIP-REVELIO MVP: TDD-FIRST ARCHITECTURE
===================================

1. TEST-DRIVEN FLOW
-----------------
                      [4GB ZIP]
                          |
                    validate_size
                          |
                          v
[Tests] --> [ZIP Reader] --> [Processor] --> [Reporter]
   |            |               |               |
   +---> size   +---> async    +---> rayon     +---> format
   |            |      chunks       parallel        match
   +---> crc32  |               |               |
   |            v               v               v
   +---> async  (2ms max)    (20ms/MB)    (PRD format)

2. MVP COMPONENTS (3 Files Only)
-----------------------------
src/
├── lib.rs    # Core traits + tests
├── main.rs   # CLI + progress
└── zip.rs    # Implementation

3. TEST-FIRST TRAITS
------------------
```rust
// lib.rs
#[cfg(test)]
mod tests {
    #[tokio::test]
    async fn test_size_limit() {
        let zip = ZipFile::new("large.zip");
        assert!(zip.size() <= 4 * 1024 * 1024 * 1024);
    }

    #[tokio::test]
    async fn test_read_speed() {
        let start = Instant::now();
        zip.read_directory().await?;
        assert!(start.elapsed() <= Duration::from_millis(2));
    }

    #[test]
    fn test_parallel_process() {
        let chunk = zip.get_chunk(1024 * 1024); // 1MB
        let start = Instant::now();
        processor.process(chunk)?;
        assert!(start.elapsed() <= Duration::from_millis(20));
    }

    #[test]
    fn test_report_format() {
        let report = reporter.generate(stats)?;
        assert_matches!(report, PRD_FORMAT);
    }
}

// Core traits driven by tests
pub trait ZipReader: Send + Sync {
    async fn read_directory(&self) -> Result<Directory>;
}

pub trait Processor: Send + Sync {
    fn process(&self, chunk: Chunk) -> Result<Stats>;
}

pub trait Reporter {
    fn generate(&self, stats: Stats) -> Result<String>;
}
```

4. CORE TYPES
-----------
```rust
#[derive(Debug)]
pub struct Stats {
    size: u64,      // Total size
    compressed: u64, // Compressed size
    count: usize,   // File count
    methods: Vec<(Method, usize)>, // Compression methods
}

pub struct Progress {
    total: AtomicU64,
    processed: AtomicU64,
}
```

5. ERROR HANDLING
--------------
```rust
pub enum Error {
    SizeLimit(u64),    // > 4GB
    IoError(io::Error),// File access
    ZipError(u32),     // Bad signature
    Crc32Error(u32),   // Bad checksum
}

impl Error {
    fn should_continue(&self) -> bool {
        !matches!(self, Error::SizeLimit(_))
    }
}
```

6. PERFORMANCE CONSTRAINTS
-----------------------
```rust
const MAX_SIZE: u64 = 4 * 1024 * 1024 * 1024; // 4GB
const DIR_READ_MS: u64 = 2;                    // 2ms
const CHUNK_PROCESS_MS: u64 = 20;              // 20ms/MB
const THREAD_MEMORY_MB: usize = 5;             // 5MB/thread
```

7. IMPLEMENTATION ORDER
--------------------
1. Size validation tests
2. Directory reading tests
3. Chunk processing tests
4. Report format tests
5. Progress bar tests
6. Integration tests

ZIP-REVELIO Architecture v1.0
========================

# ZIP-REVELIO: Minimalistic ZIP Analysis Tool

"A stopwatch for your ZIP files - it tells you exactly what's inside and how fast it got there."

## Core Components (What We Have)
```
Input/Output Flow:
ZIP File ──► Analysis ──► Report
    │           │           │
    v           v           v
 4GB max     Parallel    Metrics
   size     processing    output
```

## Test-First Design Flow
```
Test ──────► Code ──────► Refactor
  │            │            │
  v            v            v
Defines     Minimal     Optimize
  API      Solution    Performance
```

## Core Test Suite → Implementation
```rust
// 1. Size Validation Test → Implementation
#[test]
async fn test_size_limit() -> Result<()> {
    let file = create_large_file(MAX_SIZE + 1);
    let reader = FileZipReader::new(file);
    assert!(matches!(
        reader.validate_size().await,
        Err(Error::SizeLimit { .. })
    ));
}
↓
impl FileZipReader {
    async fn validate_size(&self) -> Result<()> {
        let size = fs::metadata(&self.path).await?.len();
        if size > MAX_SIZE {
            return Err(Error::SizeLimit { size });
        }
        Ok(())
    }
}

// 2. Directory Reading Test → Implementation
#[test]
async fn test_valid_zip() -> Result<()> {
    let file = create_test_zip()?;
    let reader = FileZipReader::new(file);
    let dir = reader.read_directory().await?;
    assert_eq!(dir.entries.len(), 1);
    Ok(())
}
↓
impl FileZipReader {
    async fn read_directory(&self) -> Result<Directory> {
        let archive = Arc::new(Mutex::new(
            zip::ZipArchive::new(...)?
        ));
        let entries = (0..len).into_par_iter()
            .filter_map(|i| { ... })
            .collect();
        Ok(Directory { entries })
    }
}
```

## Performance Test → Implementation
```rust
// 3. Performance Test → Parallel Processing
#[bench]
fn bench_process_10mb(b: &mut Bencher) {
    b.iter(|| {
        let stats = Arc::new(Stats::new());
        let reader = AsyncZipReader::new(
            "test_data/10mb.zip"
        );
        process_zip(reader, stats)
    });
}
↓
entries.into_par_iter()
       .filter_map(|i| {
           let mut guard = archive.lock();
           // Fast, parallel processing
       })
```

## Error Test → Error Handling
```
Test Error       Implementation
    │                │
    v                v
┌─────────┐    ┌─────────┐
│Size     │───►│Handle   │
│Format   │───►│Validate │
│IO       │───►│Recover  │
└─────────┘    └─────────┘
```

## Memory Safety Test → Pattern
```
Test                 Implementation
  │                       │
  v                      v
Safe ──────►  Arc<Mutex<ZipArchive>>
Share          │
Access         └──► Thread-safe read
```

## Test Categories Drive Design
```
Unit Tests        Integration      Benchmarks
     │                │               │
     v                v               v
  ┌─────────────┬──────────────┬──────────┐
  │Validation   │End-to-End    │Speed     │
  │Processing   │CLI Interface │Memory    │
  │Error Cases  │File Output   │CPU Usage │
  └─────────────┴──────────────┴──────────┘
```

## Performance Metrics (Test-Driven)
```
Benchmark Goals   Implementation
     │                │
     v                v
Speed >20MB/s ──► Parallel
CPU 8 cores  ──► Rayon
Memory <512MB ──► Efficient
```

## Test Data → Implementation
```
test_data/         Validates
├── 1mb.zip   ───► Normal case
├── 10mb.zip  ───► Performance
└── corrupted ───► Error handling
```

## Why TDD Works Here
1. Tests Define Requirements
   ```
   test_valid_zip    ──► Basic functionality
   test_empty_zip    ──► Edge cases
   test_size_limit   ──► Constraints
   bench_process_10mb ──► Performance
   ```

2. Minimal Implementation
   ```
   Only code what tests require
   No speculative features
   Clear success criteria
   Measurable performance
   ```

3. Refactor with Confidence
   ```
   Tests protect core functionality
   Performance metrics guide optimization
   Error cases are verified
   Memory safety is assured
   ```

Remember:
- Write test first
- Implement minimal solution
- Measure performance
- Refactor safely