# Rust Anti-Patterns and Best Practices Guide ü¶Ä

## Memory Management Patterns

### ‚úÖ Good Patterns

1. RAII (Resource Acquisition Is Initialization)
```rust
impl Drop for Buffer {
    fn drop(&mut self) {
        match self {
            Buffer::Large(id) => {
                // Explicit cleanup in drop
                unsafe { self.unmap() };
            }
            _ => {}
        }
    }
}
```

2. Smart Pointer Usage
```rust
// Use Arc for shared ownership
let buffer_pool = Arc::new(BufferPool::new(config));
// Use Mutex for thread-safe mutable access
let results = Arc::new(Mutex::new(Vec::new()));
```

3. Explicit Lifetimes
```rust
pub struct ZipReader<'a> {
    data: &'a [u8],
    position: usize,
}
```

4. Thread-Local Storage
```rust
// Good: Thread-safe global state
thread_local! {
    static BUFFER_POOL: RefCell<Option<Arc<BufferPool>>> = RefCell::new(None);
}

// Usage
BUFFER_POOL.with(|pool| {
    if let Some(pool) = &*pool.borrow() {
        // Use pool safely
    }
});
```

5. Memory Mapping Safety
```rust
// Good: Safe memory mapping
let mmap = unsafe {
    MmapOptions::new()
        .populate() // Pre-fault pages
        .map(&file)?
};
Self::validate_map(&mmap)?;
```

### ‚ùå Anti-Patterns

1. Manual Memory Management
```rust
// BAD: Manual cleanup
fn cleanup(&mut self) {
    self.free_resources();
}

// GOOD: Use Drop trait
impl Drop for Resource {
    fn drop(&mut self) {
        // Automatic cleanup
    }
}
```

2. Raw Pointers Without Safety
```rust
// BAD: Unsafe raw pointer usage
let ptr = data.as_ptr();
unsafe { *ptr = 42; }

// GOOD: Safe abstractions
let mut data = vec![0; size];
data[0] = 42;
```

3. Global Mutable State
```rust
// BAD: Unsafe global state
static mut GLOBAL_POOL: Option<BufferPool> = None;

// GOOD: Thread-local or Arc<RwLock<_>>
static POOL: Lazy<Arc<RwLock<BufferPool>>> = 
    Lazy::new(|| Arc::new(RwLock::new(BufferPool::new())));
```

4. Unsafe Memory Access
```rust
// BAD: Unchecked memory access
let ptr = data.as_ptr();
unsafe { *ptr.add(1) = 42; }

// GOOD: Safe slice access
if let Some(elem) = data.get_mut(1) {
    *elem = 42;
}
```

5. Resource Leaks
```rust
// BAD: Manual resource management
let file = File::open("data")?;
process_file(&file);
file.close(); // Explicit close unnecessary

// GOOD: RAII
let file = File::open("data")?;
process_file(&file)?; // File closes automatically
```

## Concurrency Patterns

### ‚úÖ Good Patterns

1. Message Passing
```rust
use crossbeam::channel;
let (tx, rx) = channel::bounded(100);
tx.send(message)?;
let received = rx.recv()?;
```

2. Thread Pool Management
```rust
let pool = ThreadPoolBuilder::new()
    .num_threads(thread_count)
    .build()
    .map_err(|e| ZipError::Memory(e.to_string()))?;
```

3. Atomic Operations
```rust
use std::sync::atomic::{AtomicU64, Ordering};
self.processed.fetch_add(bytes, Ordering::Relaxed);
```

4. Memory Ordering
```rust
// Good: Proper memory ordering for visibility
self.processed.fetch_add(bytes, Ordering::Release);
self.last_update.load(Ordering::Acquire)
```

5. Lock Guards
```rust
// Good: Automatic lock release
if let Ok(guard) = mutex.lock() {
    guard.process()?;
} // Lock released here
```

### ‚ùå Anti-Patterns

1. Shared Mutable State
```rust
// BAD: Global mutable state
static mut COUNTER: u32 = 0;

// GOOD: Use Atomic types
static COUNTER: AtomicU32 = AtomicU32::new(0);
```

2. Deadlock-Prone Locking
```rust
// BAD: Potential deadlock
let _lock1 = mutex1.lock()?;
let _lock2 = mutex2.lock()?; // Might deadlock

// GOOD: Consistent lock ordering
if let (Ok(lock1), Ok(lock2)) = (mutex1.try_lock(), mutex2.try_lock()) {
    // Use locks
}
```

3. Relaxed Ordering Overuse
```rust
// BAD: Relaxed ordering for synchronization
count.fetch_add(1, Ordering::Relaxed);

// GOOD: Proper ordering
count.fetch_add(1, Ordering::Release);
```

4. Lock Contention
```rust
// BAD: Long-held locks
let _lock = mutex.lock()?;
expensive_operation(); // Lock held too long

// GOOD: Minimal lock scope
let data = {
    let lock = mutex.lock()?;
    lock.get_data().clone()
}; // Lock released
expensive_operation(data);
```

5. Race Conditions
```rust
// BAD: Check-then-act race
if map.contains_key(&k) {
    map.get(&k).unwrap().process();
}

// GOOD: Atomic operation
if let Some(v) = map.get(&k) {
    v.process();
}
```
